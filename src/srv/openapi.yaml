openapi: 3.0.1
info:
  title: ~#PROJECT#~
  description: ~#SHORTDESCRIPTION#~
  contact:
    email: ~#OWNEREMAIL#~
  license:
    name: Internal use only. All rights reserved.
    url: '~#PROJECTLINK#~/blob/master/LICENSE'
  version: 1.0.0
servers:
  - url: 'https://~#PROJECT#~.local:8017/'
tags:
  - name: index
    description: Service index
  - name: ping
    description: Ping this service
  - name: status
    description: Check this service health status
  - name: metrics
    description: Returns Prometheus metrics
  - name: pprof
    description: Returns pprof data
  - name: auth
    description: User authentication and authorization operations
  - name: proxy
    description: Proxy
paths:
  /:
    get:
      tags:
        - index
      summary: Provides a summary of the service and available endpoints
      responses:
        '200':
          description: The service is reachable
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: object
                        description: content
                        properties:
                          duration:
                            type: number
                            description: service uptime in seconds
                          routes:
                            type: array
                            items:
                              type: object
  /ping:
    get:
      tags:
        - ping
      summary: Check if the service is reachable
      responses:
        '200':
          description: The service is reachable
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: OK
  /status:
    get:
      tags:
        - status
      summary: Returns the health status of this service
      responses:
        '200':
          description: The service is healthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: object
                        description: content
                        properties:
                          duration:
                            type: number
                            description: service uptime in seconds
                          service:
                            type: string
                            description: service status
                          proxy:
                            type: string
                            description: proxy status
                          mysql:
                            type: string
                            description: mysql database status
                          mongo:
                            type: string
                            description: mongodb status
                          elastic:
                            type: string
                            description: elasticsearch status
        '503':
          description: One or more internal systems are not available
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: object
                        description: content
                        properties:
                          duration:
                            type: number
                            description: service uptime in seconds
                          service:
                            type: string
                            description: service status
                          proxy:
                            type: string
                            description: proxy status
                          mysql:
                            type: string
                            description: mysql database status
                          mongo:
                            type: string
                            description: mongodb status
                          elastic:
                            type: string
                            description: elasticsearch status
  /metrics:
    get:
      tags:
        - metrics
      summary: Returns Prometheus metrics
      responses:
        '200':
          description: Prometheus metrics
  /pprof:
    get:
      tags:
        - pprof
      summary: Returns pprof profiling data
      responses:
        '200':
          description: pprof profiling data
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  description: user name
                password:
                  type: string
                  description: user password
      responses:
        '200':
          description: >-
            Returns a JWT token in the data field to be used in the
            authorization header as beared token.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: JWT token
        '400':
          description: The request body is malformed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: Error message
        '401':
          description: Invalid user credentials
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: Error message
        '500':
          description: Unable to sign the token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: Error message
  /auth/refresh:
    get:
      tags:
        - auth
      summary: Renew the JWT token before expiration
      responses:
        '200':
          description: Returns a new JWT token in the data field.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: JWT token
        '400':
          description: >-
            The JWT token can only be renewed when closer to expiration. The
            time limit is set in the service configuration.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: Error message
        '401':
          description: Invalid user credentials
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: Error message
        '500':
          description: Unable to sign the token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: Error message
  /proxy/*:
    get:
      tags:
        - proxy
      summary: Proxy for any GET request
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
components:
  schemas:
    response:
      type: object
      properties:
        program:
          type: string
          description: program name (i.e. ~#PROJECT#~)
        version:
          type: string
          description: service version number (e.g. "1.2.3")
        release:
          type: string
          description: service release number (e.g. "13")
        url:
          type: string
          description: server address as configured
        datetime:
          type: string
          description: readable date-time (RFC3339)
        timestamp:
          type: integer
          description: timestamp in nanoseconds
        status:
          type: string
          description: http status code description
        code:
          type: integer
          description: http status code
        message:
          type: string
          description: response message
